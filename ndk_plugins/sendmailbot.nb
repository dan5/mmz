require 'mail'
require 'kconv'
require 'nkf'

class SendMailBot < Nadoka::NDK_Bot
  def bot_initialize
    @channel = @bot_config.fetch(:channel)
    @ch_debug = @bot_config.fetch(:channel_debug, nil)
    @deliver_list = @bot_config.fetch(:list)
    @deliver_from = @bot_config.fetch(:from, 'mmz@example.com')
    @tm = @bot_config.fetch(:tm, 5) # min
    @pop_check_times = @bot_config.fetch(:pop_check_times, 20)
    pop_setting = @bot_config.fetch(:pop_setting)
    Mail.defaults do
      retriever_method :pop3, pop_setting
    end
    @message_ids = []
    @count = 0
    create_thread 1
  end

  def check_start t
    debug_notice "check_start #{t}"
    @check_loop_count = 0
    if @check_times.nil? or @check_times <= 0
      create_thread t
    else
      @check_times = t if t > @check_times
    end
  end

  def create_thread t
    if $sendmailbot_th && $sendmailbot_th.alive?
      puts "kill thread ----------"
      $sendmailbot_th.kill
    end
    $sendmailbot_th = Thread.new do
      puts "create thread ----------"
      @check_times = t
      while @check_times > 0
        puts @check_times
        pop_mail @channel
        @check_times -= 1
        @check_loop_count += 1
        sleep 1 + @check_loop_count / 5
      end
    end
  end

  def on_privmsg prefix, ch, msg
    mail_is_send = false
    @deliver_list.each do |to, values|
      next if prefix.nick =~ values[:except]
      unless nick_exist? ch, values[:nick]
        deliver_mail(to, prefix.nick, values[:include_body] ? msg : "")
        mail_is_send = true
      end
    end
    check_start @pop_check_times if mail_is_send
  end
      
  def deliver_mail _to, nick, msg
    text = nick_msg nick, msg
    if ENV["TERM_PROGRAM"] == "Apple_Terminal"
      debug_notice("debug: to:#{_to} #{text}")
      return
    end
    _from = @deliver_from
    mail = Mail.new do
      from     _from
      to       _to
      body     text.toutf8
    end
    mail.deliver!
  end

  def on_timer tm
    check @channel
  end

  def check ch
    tm = Time.now
    if tm.to_i - @tm * 60 > @prevtm.to_i
      @prevtm = tm
      check_start 1
    end
  end

  def pop_mail ch
    debug_notice("debug: pop_mail")
    mail_is_exist = false
    emails = Mail.find(:what => :last, :count => 3, :order => :asc)
    emails.each do |mail|
      unless @message_ids.include?(mail.message_id)
        mail_is_exist = true
        @message_ids.unshift mail.message_id
        @message_ids = @message_ids.first(10)

        from = mail.from.first
        nick = @deliver_list.fetch(from, :nick => from).fetch(:nick)
        text = safe_body(mail)

        # post notice
        _send_notice ch, nick, text

        # post mail
        @deliver_list.each do |to, values|
          next if mail.from.include?(to)
          unless nick_exist? ch, values[:nick]
            deliver_mail(to, nick, values[:include_body] ? text : "")
          end
        end
      end
    end
    check_start @pop_check_times if mail_is_exist
  end

  def nick_exist? ch, nick
    @state.channel_users(ccn(ch)).any? {|e| e =~ /\A#{nick}/ }
  end

  def safe_body mail
    body = mail.body.decoded.toutf8.gsub(/\s+\z/, "")
    NKF.nkf('-j', body).force_encoding('ASCII-8BIT')
  end

  def nick_msg nick, text
    "#{nick}: #{text}"
  end

  def _send_notice ch, nick, text
    _text = text.gsub(/\s/, ' ')
    send_notice(ch, nick_msg(nick, _text))
  end

  def debug_notice msg
    send_notice(@ch_debug, msg) if @ch_debug
  end
end
